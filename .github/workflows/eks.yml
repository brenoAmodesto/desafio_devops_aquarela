name: "Terraform / EKS / Deploy"

on:
  workflow_run:
    workflows: ["TFLint Checks"]
    types:
      - completed

permissions:
  id-token: write
  contents: read
  pull-requests: write
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.0
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      - name: Export Environment Variables
        id: export-env
        run: |
          cluster_endpoint=$(terraform output -raw cluster_endpoint)
          echo "CLUSTER_ENDPOINT=${cluster_endpoint}" >> $GITHUB_ENV
          echo ${{ env.CLUSTER_ENDPOINT }}

      - name: Setup Kubeconfig
        run: aws eks --region sa-east-1 update-kubeconfig --name eks-demo

      - name: Setup Helm
        uses: WyriHaximus/github-action-helm3@v3
      
      - name: Kubectl get nodes
        run: kubectl get nodes

      - name: Install Karpenter
        run: | 
           helm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version 0.37.0 --namespace karpenter --create-namespace \
           --set settings.clusterEndpoint=${{ env.CLUSTER_ENDPOINT }} \
           -f karpenter/karpenter-values.yaml

      - name: Wait
        run: sleep 30

      - name: Apply Karpenter Node Pool
        run: | 
           kubectl apply -f karpenter/nodepool.yaml

      - name: Metrics Server
        run: kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
      
      - name: Sock-Shop Deployment
        run: kubectl apply -f sockshopyaml/complete-demo.yaml
      
      - name: Wait
        run: sleep 30
      
      - name: Horizontal Pod AutoScaler
        run: kubectl apply -f sockshopyaml/hpa.yaml
      
      - name: kubectl create namespace
        run: kubectl create namespace prometheus
      
      - name: Prometheus & Grafana
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install stable prometheus-community/kube-prometheus-stack -f sockshopyaml/prometheus-values_v2.yaml -n prometheus

      - name: EBS Driver
        run: |
          helm repo add aws-ebs-csi-driver https://kubernetes-sigs.github.io/aws-ebs-csi-driver
          helm repo update
          helm install aws-ebs-csi-driver aws-ebs-csi-driver/aws-ebs-csi-driver --namespace kube-system
      
      - name: Install CRDS
        run: kubectl create -f https://download.elastic.co/downloads/eck/2.13.0/crds.yaml
      
      - name: Install Operator RBAC
        run: kubectl apply -f https://download.elastic.co/downloads/eck/2.13.0/operator.yaml
      
      - name: Kubectl apply -f elasticsearch
        run: kubectl apply -f elasticsearch/elasticsearch.yaml
      
      - name: Wait
        run: sleep 30
      
      - name: Kubectl apply -f kibana 
        run: kubectl apply -f elasticsearch/kibana.yaml
      
      - name: Wait
        run: sleep 60
      
      - name: Expose kibana service type load balancer
        run: kubectl apply -f elasticsearch/kibana.yaml
      
      - name: APM Server
        run: kubectl apply -f elasticsearch/apmserver.yaml

 

      
